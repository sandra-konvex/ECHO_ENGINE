/*
 * Copyright (c) 2025, Sandra Bati Furquim
 * All rights reserved.
 *
 * This file is released under the MIT License.
 * See LICENSE file for details.
 */
#include <LittleFS.h>
#include "globals.h"
#include "modulo.h"

bool Setup_LittleFS() {
  if (!LittleFS.begin(true)) {
    Serial.println("‚ùå Erro ao montar LittleFS");
    return false;
  }

  Serial.println("‚úÖ LittleFS montado com sucesso");
  Serial.print("Tamanho total (bytes): ");
  Serial.println(LittleFS.totalBytes());
  Serial.print("Espa√ßo dispon√≠vel: ");
  Serial.println(LittleFS.totalBytes() - LittleFS.usedBytes());

  // Cria o diret√≥rio se n√£o existir
  if (!LittleFS.exists(dataDir)) {
    if (LittleFS.mkdir(dataDir)) {
      Serial.println("üìÅ Diret√≥rio " + String(dataDir) + " criado com sucesso.");
    } else {
      Serial.println("‚ùå Erro ao criar diret√≥rio " + String(dataDir));
      return false;
    }
  } else {
    Serial.println("üìÅ Diret√≥rio " + String(dataDir) + " j√° existe.");
  }

  return true;
}

void Load_Config_LFS() {
  File file = LittleFS.open("/config.txt", "r");
  if (file) {
    while (file.available()) {
      String line = file.readStringUntil('\n');
      line.trim();

      if (line.startsWith("SSID=")) ssid = line.substring(5);
      else if (line.startsWith("PASS=")) password = line.substring(5);
      else if (line.startsWith("WS_SERVER=")) ws_server = line.substring(10);
      else if (line.startsWith("WS_PORT=")) ws_port = line.substring(8).toInt();
      else if (line.startsWith("SCHOOL_ID=")) school_id = line.substring(10);
      else if (line.startsWith("BRILHO=")) brilho_base = line.substring(7).toInt();
      else if (line.startsWith("SENS=")) sensibilidade = line.substring(5).toInt();
      else if (line.startsWith("LANG=")) lang = line.substring(5);
    }
    file.close();
    Serial.println("‚ö†Ô∏è Lendo Config LittleFS.");
  } else {
    ssid = "void"; // Marca para n√£o tentar conectar
    Serial.println("‚ùå Arquivo de configura√ß√£o n√£o encontrado no LittleFS.");
  }
}

void Save_Config_LFS() {
  File file = LittleFS.open("/config.txt", FILE_WRITE);
  if (file) {
    file.println("SSID=" + ssid);
    file.println("PASS=" + password);
    file.println("WS_SERVER=" + ws_server);
    file.println("WS_PORT=" + String(ws_port));
    file.println("SCHOOL_ID=" + school_id);
    file.println("BRILHO=" + String(brilho_base));
    file.println("SENS=" + String(sensibilidade));
    file.println("LANG=" + lang);
    file.close();

    Serial.println("‚úÖ Configura√ß√£o salva no LittleFS.");
    SerialBT.println("{SAVE=OK}");
  } else {
    Serial.println("‚ùå Erro ao salvar configura√ß√£o no LittleFS.");
    SerialBT.println("{SAVE=ERROR}");
  }
}

String getFallbackFileName() {
  File dir = LittleFS.open("/dados");
  if (!dir || !dir.isDirectory()) {
    LittleFS.mkdir("/dados"); // Garante que o diret√≥rio exista
    return "/dados/dados_000001.jsonL";
  }

  String lastName = "";
  File file = dir.openNextFile();
  while (file) {
    String name = String(file.name());
    if (name.endsWith(".jsonL") && name.startsWith("/dados/dados_")) {
      if (name > lastName) lastName = name;
    }
    file = dir.openNextFile();
  }

  if (lastName == "") {
    return "/dados/dados_000001.jsonL";
  } else {
    int underscore = lastName.lastIndexOf('_');
    int dot = lastName.lastIndexOf('.');
    String numStr = lastName.substring(underscore + 1, dot);
    int num = numStr.toInt() + 1;
    char buffer[32];
    sprintf(buffer, "/dados/dados_%06d.jsonL", num);
    return String(buffer);
  }
}

void deleteOldestFile_LFS() {
  String oldestFile = "";
  time_t oldestTime = LONG_MAX;

  File dir = LittleFS.open("/dados");
  if (!dir || !dir.isDirectory()) return;

  File file = dir.openNextFile();
  while (file) {
    time_t modTime = file.getLastWrite();
    if (modTime < oldestTime) {
      oldestTime = modTime;
      oldestFile = String(file.name());
    }
    file = dir.openNextFile();
  }

  if (oldestFile != "") {
    LittleFS.remove(oldestFile);
    Serial.println("üóëÔ∏è Arquivo mais antigo removido: " + oldestFile);
  }
}

int countFiles_LFS() {
  int count = 0;
  File dir = LittleFS.open("/dados");
  if (!dir || !dir.isDirectory()) return 0;

  File file = dir.openNextFile();
  while (file) {
    count++;
    file = dir.openNextFile();
  }
  return count;
}
/* 

bool Write_LFS(String data, unsigned long timestamp) {
  unsigned long currentHour = timestamp / 3600;

  // Verifica se √© uma nova hora
  if (currentHour != lastHour || currentFileName == "") {
    lastHour = currentHour;
    currentFileName = "/dados/" + getFileName(timestamp);  // Garante caminho completo
    Serial.println("üïí Novo arquivo: " + currentFileName);

    // Verifica se o diret√≥rio existe
    if (!LittleFS.exists("/dados")) {
      Serial.println("üìÅ Diret√≥rio /dados n√£o existe, criando...");
      if (!LittleFS.mkdir("/dados")) {
        Serial.println("‚ùå Erro ao criar diret√≥rio /dados");
        return false;
      }
    }

    // Verifica se h√° mais de 72 arquivos
    if (countFiles_LFS() >= maxFiles) {
      deleteOldestFile_LFS();
    }
  }

  // Verifica se currentFileName √© v√°lido
  if (currentFileName == "" || !currentFileName.startsWith("/dados/")) {
    Serial.println("‚ö†Ô∏è currentFileName inv√°lido: " + currentFileName);
    currentFileName = "/dados/" + getFileName(timestamp);
    Serial.println("Corrigido para: " + currentFileName);
  }

  Serial.println("‚úçÔ∏è Escrevendo em: " + currentFileName);
  File file = LittleFS.open(currentFileName, FILE_APPEND);
  if (!file) {
    Serial.println("‚ùå Erro ao abrir arquivo: " + currentFileName);
    return false;
  }

  if (file.println(data)) {
    Serial.println("‚úÖ Dados escritos com sucesso: " + data);
    file.flush();
  } else {
    Serial.println("‚ùå Erro ao escrever dados no arquivo.");
  }

  file.close();
  return true;
}
 */



#include <FS.h>
#include <LittleFS.h>

// const int maxFiles = 72; // Limite m√°ximo de arquivos

bool Write_LFS(String json, unsigned long epoch) {
  String fileName;

  // Se epoch for inv√°lido, gera nome alternativo
  if (epoch == 0) {
    fileName = getFallbackFileName();
    Serial.println("‚ö†Ô∏è Epoch inv√°lido. Usando nome alternativo: " + fileName);
  } else {
    fileName = "/dados/" + String(epoch) + ".jsonL";
  }

  // Verifica se h√° mais de 72 arquivos
  if (countFiles_LFS() >= maxFiles) {
    deleteOldestFile_LFS();
  }

  File file = LittleFS.open(fileName, FILE_WRITE);
  if (!file) {
    Serial.println("‚ùå Erro ao abrir arquivo: " + fileName);
    return false;
  }

  file.println(json);
  file.close();
  Serial.println("‚úÖ Dados gravados em: " + fileName);
  return true;
}




